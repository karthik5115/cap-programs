class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length,cnt=0;
        int[] [] visited =  new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
              if(visited[i][j]==0 && grid[i][j]!='0'){
                  dfs(grid,visited,i,j,m,n);
                  cnt++;
              }
            }
        }
    return cnt;
    }
    public void dfs(char[][]grid,int[][]visited,int i,int j,int m,int n){
        if(i>=0 && i<m && j>=0 && j<n){
            if(grid[i][j]=='1' && visited[i][j]==0){
                visited[i][j]=1;
                dfs(grid,visited,i-1,j,m,n);
                dfs(grid,visited,i,j-1,m,n);
                dfs(grid,visited,i+1,j,m,n);
                dfs(grid,visited,i,j+1,m,n);
            }
        }
    }
}
