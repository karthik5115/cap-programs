class Solution {
    public int orangesRotting(int[][] grid) {
        class pair{
            int row;
            int colm;
            pair(int row,int colm){
                this.row = row;
                this.colm = colm;
            }
        }
        int m = grid.length;
        int n = grid[0].length;
        int [][] visited = new int[m][n];
        Queue<pair> q = new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.offer(new pair(i,j));
                    visited[i][j]=1;
                }
            }
        }
       int cnt=0;
        while(q.size()!=0){
            int len = q.size();
            cnt++;
            for(int i=0;i<len;i++){
                pair curr = q.poll();
                int r = curr.row;
                int c = curr.colm;
                if(r-1>=0){
                    if(grid[r-1][c]==1 && visited[r-1][c]==0){
                        grid[r-1][c]=2;
                        visited[r-1][c]=1;
                        q.offer(new pair(r-1,c));
                    }
                }
                if(c-1>=0){
                     if(grid[r][c-1]==1 && visited[r][c-1]==0){
                        grid[r][c-1]=2;
                        visited[r][c-1]=1;
                        q.offer(new pair(r,c-1));
                    }
                }
                 if(r+1<m){
                    if(grid[r+1][c]==1 && visited[r+1][c]==0){
                        grid[r+1][c]=2;
                        visited[r+1][c]=1;
                        q.offer(new pair(r+1,c));
                    }
                }
                 if(c+1<n){
                     if(grid[r][c+1]==1 && visited[r][c+1]==0){
                        grid[r][c+1]=2;
                        visited[r][c+1]=1;
                        q.offer(new pair(r,c+1));
                    }
                }

            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                       return -1;
                }
            }
        }
        if(cnt==0){
            return 0;
        }
return cnt-1;
    }
}
