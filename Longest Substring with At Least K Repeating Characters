class Solution {
    public int longestSubstring(String s, int k) {
        if(s==null || s.length()==0 || s.length()<k){
            return 0;
        }
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<s.length();i++){
            int a = map.getOrDefault(s.charAt(i),0);
            map.put(s.charAt(i),a+1);
        }
        for(int i=0;i<s.length();i++){
            if(map.get(s.charAt(i))<k){
                // if(i==0 && i==s.length()-1){
                //     return 0;
                // }
                // else if(i==0){
                //     return longestSubstring(s.substring(i+1,s.length()),k);
                // }
                // else if(i==s.length()-1){
                //     return longestSubstring(s.substring(0,i),k);
                // }
                return Math.max(longestSubstring(s.substring(0,i),k),longestSubstring(s.substring(i+1,s.length()),k));
            }
        }
        return s.length();
    }
}
